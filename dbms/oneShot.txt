
DBMS ONE SHOT :-

- INTRODUCTION TO DBMS

- Database management systems 
- Data is a collection of raw , unorganised facts and details like text .
- Data can be recorded and doesen't have any meaning unless processed .
- Data can be quantitative like age , cost of item and qualitative like name , gender , colour .
- Information is processed , organised and structured data . 
- Data is a collection of facts while information puts those facts into context .
- Database is an electronic place/system where data is stored in a way that it can be easily accessed , managed and updated .
- To make real use of data we need the database management systems .
- Database management system is a collection of interrelated data and a set of programs to access those data .
- The primary goal of a dbms is to provide a way to store and retrive the database information that is both convenient and efficient .
- Dbms is database itself along with all the software and functionality .
- It is used to perform the operations like addition , retrival , updation and deletion of the data .
- Filesystem is also a way to store the data but have major disadvantage over dbms .
- Those disadvantages are - data redundancy and consistency , difficulty in accessing data , integrity problems , atomicity problems , concurrent-access anomalies and security problems .
- Above are also the advantages of dbms .

- DBMS ARCHITECTURE

- Dbms architecture is a 3 schema architecture also known as view of the data .
- It provides abstract view of data which hides how data is stored .
- Major objective is to provide personalized view to the multiple users .
- Three levels are physical , logical and external or view level/schema .
- Physical level is the lowest level of abstraction like how data is stored , storage structures , data structure likle n-array tree etc , encryption , security algorithms.
- Logical/conceptual level defines the design of the db , describes what data and what relationships among data , dba operate the logical level .
- View level is the highest level which simplifies the user interaction , different view to different end user , also provide security mechanisms to prevent access .
- The collection of information stored at a particular moment is called the instance of db .
- Overall design is DB schema , a structural description .
- Logical schema is most important .
- Data models provide a way to design db like er model , relationship model , object oriented model , object relationship model etc .
- Db languages are ddl , dml etc 
- DDL data definition language is used to specify database schema .
- DML data manipulation language is used express data queries and updates like retrival , deletion , insertion and updation .
- Applications use a layer to interact with the db like a host language sql .
- Dba is db administrator who control the data and programs which access data . 
- Task of dba include - schema definition , storage and access modification , routine checkups , security patche and updates .
- Dbms application arhitecture include a client machine which remotly use db and server machine on which db runs .
- Dbms application architecture include three architectures t1 t2 t3 .
- T1 architecture is when client , server and db all present in the same machine .
- T2 architecture is when app is partitioned in 2 components client and server/db , client access data by queries and api's .
- T3 architecture is when app is partitioned in 3 component client , application server , db , client sent the request to app server and app server intract with db which increase security  , scalability etc . 
- T3 architecture advantages are scalability , data integrity and security .

- ENTITY-RELATIONSHIP MODEL

- Data model is a collection of conceptual tools for describing data , data relationship , data semantics and consistancy constraints .
- Er-Model is a It is a high level data model based on a perception of a real world that consists of a collection of basic objects, called entities and of relationships among these objects.
- Graphical representation of ER Model is ER diagram, which acts as a blueprint of DB.
- Entity: An Entity is a “thing” or “object” in the real world that is distinguishable from all other objects.
- Entity can be uniquely identified. (By a primary attribute, aka Primary).
- Strong Entity: Can be uniquely identified.
- Weak Entity: Can’t be uniquely identified., depends on some other strong entity.
- Weak entity depends on strong entity for existence.
- Entity set is a set of entities of the same type that share the same properties, or attribute , E.g., Student is an entity set.
- Attribute 
1. An entity is represented by a set of attribute
2. Each entity has a value for each of its attribute
3. For each attribute, there is a set of permitted values, called the domain, or value set, of that attr
4. E.g., Student Entity has following attribut
  A. Student_ID
  B. Name
  C. Standard
  D. Course
  E. Batch
  F. Contact number
  G. Address
- Types of attribute include simple , composite , single-valued , multi-valued , derived , null value .
- Simple Attributes are those which can’t be divided furthe , E.g., Customer’s account number in a bank, Student’s Roll number etc.
- Composite attributes are those which can be divided into subparts (that is, other attributes , E.g., Name of a person, can be divided into first-name, middle-name, last-name .
- Single-valued attributes are only one value attributes , e.g., Student ID, loan-number for a loan.
- Multi-valued attributes have more than one value , e.g., phone-number, nominee-name on some insurance, dependent-name etc ,Limit constraint may be applied, upper or lower limits.
- Derived attributes - Value of this type of attribute can be derived from the value of other related attributes , e.g., Age, loan-age, membership-period etc.
- NULL Value - An attribute takes a null value when an entity does not have a value for it . It may indicate “not applicable”, value doesn’t exist. e.g., person having no middle-name , It may indicate “unknown”. Unknown can indicate missing entry, e.g., name value of a customer is NULL, means it is missing as name
must have some value. Not known, salary attribute value of an employee is null, means it is not known ye
- Relationships :
- Association among two or more entities , e.g., Person has vehicle, Parent has Child, Customer borrow loan etc.
- Strong Relationship, between two independent entities.
- Weak Relationship, between weak entity and its owner/strong entity , e.g., Loan <instalment-payments> Payment.
- Degree of Relationship
- Number of entities participating in a relationship.
- Unary, Only one entity participates. e.g., Employee manages employee.
- Binary, two entities participates. e.g., Student takes Course.
- Ternary relationship, three entities participates. E.g, Employee works-on branch, employee works-on job.
- Binary are common.
- Relationships Constraints
- Mapping Cardinality / Cardinality Ratio
- Number of entities to which another entity can be associated via a relationship.
- One to one, Entity in A associates with at most one entity in B, where A & B are entity sets. And an entity of B is associated with at most one entity of A ,E.g., Citizen has Aadhar 
Card.
- One to many, Entity in A associated with N entity in B. While entity in B is associated with at most one entity in A , e.g., Citizen has Vehicle.
- Many to one, Entity in A associated with at most one entity in B. While entity in B can be associated with N entity in A , e.g., Course taken by Professor.
- Many to many, Entity in A associated with N entity in B. While entity in B also associated with N entity in A , Customer buys product ,  Student attend course .
- Participation Constraints , Aka, Minimum cardinality constraint.
- Types, Partial & Total Participation.
- Partial Participation, not all entities are involved in the relationship instance.
- Total Participation, each entity must be involved in at least one relationship instance , e.g., Customer borrow loan, loan has total participation as it can’t exist without customer 
  entity. And customer has partial participation.
- Weak entity has total participation constraint, but strong may not have total.
- ER Notations :
- Reactangle is used for entity . 
- Reactangle with extra boundary means weak entity.
- Oval is used for attribute .
- Oval with extra boundary is used for multivalued attribute.
- Underlined text inside oval is used for primary key.
- Dotted underline text inside oval is used for weak key attribute .
- Dotted oval boundary is used for derived attribute .
- Diamond is used for relationship .
- Diamond with extra bounday is used for weak relationship.
- Straight line is used for the participation .
- Two straight line is used for total participation .

- EXTENDED ER FEATURES
- Specialisation
- In ER model, we may require to subgroup an entity set into other entity sets that are distinct in some way with other entity sets.
- Specialisation is splitting up the entity set into further sub entity sets on the basis of their functionalities, specialities and features.
- It is a Top-Down approach.
- e.g., Person entity set can be divided into customer, student, employee. Person is superclass and other specialised entity sets are subclasses.
-  We have “is-a” relationship between superclass and subclass.
- Depicted by triangle component.
- Why Specialisation?
- Certain attributes may only be applicable to a few entities of the parent entity set.
- DB designer can show the distinctive features of the sub entities.
- To group such entities we apply Specialisation, to overall refine the DB blueprint.
- Generalisation
- It is just a reverse of Specialisation.
- DB Designer, may encounter certain properties of two entities are overlapping. Designer may consider to make a new generalised entity set. That generalised entity set will be a super 
class.
- “is-a” relationship is present between subclass and super class.
- e.g., Car, Jeep and Bus all have some common attributes, to avoid data repetition for the common attributes. DB designer may consider to Generalise to a new entity set “Vehicle”.
- It is a Bottom-up approach.
- Why Generalisation?
- Makes DB more refined and simpler.
- Common attributes are not repeated.
- Attribute Inheritance
- Both Specialisation and Generalisation, has attribute inheritance.
- The attributes of higher level entity sets are inherited by lower level entity sets.
- E.g., Customer & Employee inherit the attributes of Person.
- Participation Inheritance
- If a parent entity set participates in a relationship then its child entity sets will also participate in that relationship.
- Aggregation
- How to show relationships among relationships? - Aggregation is the technique.
- Abstraction is applied to treat relationships as higher-level entities. We can call it Abstract entity.
- Avoid redundancy by aggregating relationship as an entity set itself .

- RELATIONAL MODEL
- Relational Model (RM) organises the data in the form of relations (tables).
- A relational DB consists of collection of tables, each of which is assigned a unique name.
- A row in a table represents a relationship among a set of values, and table is collection of such relationships.
- Tuple: A single row of the table representing a single data point / a unique record.
- Columns: represents the attributes of the relation. Each attribute, there is a permitted value, called domain of the attribute.
- Relation Schema: defines the design and structure of the relation, contains the name of the relation and all the columns/attributes.
- Common RM based DBMS systems, aka RDBMS: Oracle, IBM, MySQL, MS Access.
- Degree of table: number of attributes/columns in a given table/relation.
- Cardinality: Total no. of tuples in a given relation.
- Relational Key: Set of attributes which can uniquely identify an each tuple.
- Important properties of a Table in Relational Model
- The name of relation is distinct among all other relation.
- The values have to be atomic. Can’t be broken down further.
- The name of each attribute/column must be unique.
- Each tuple must be unique in a table.
- The sequence of row and column has no significance.
- Tables must follow integrity constraints - it helps to maintain data consistency across the tables.
- Relational Model Keys
- Super Key (SK): Any P&C of attributes present in a table which can uniquely identify each tuple.
- Candidate Key (CK): minimum subset of super keys, which can uniquely identify each tuple. It contains no redundant attribute.
- CK value shouldn’t be NULL.
- Primary Key (PK):
- Selected out of CK set, has the least no. of attributes.
- Alternate Key (AK)
- All CK except PK.
- Foreign Key (FK)
- It creates relation between two tables.
- A relation, say r1, may include among its attributes the PK of an other relation, say r2. This attribute is called FK from r1 referencing r2.
- The relation r1 is aka Referencing (Child) relation of the FK dependency, and r2 is called Referenced (Parent) relation of the FK.
- FK helps to cross reference between two different relations.
- Composite Key: PK formed using at least 2 attributes.
- Compound Key: PK which is formed using 2 FK.
- Surrogate Key:
- Synthetic PK.
- Generated automatically by DB, usually an integer value.
- May be used as PK.
- Integrity Constraints
- CRUD Operations must be done with some integrity policy so that DB is always consistent.
- Introduced so that we do not accidentally corrupt the DB.
- Domain Constraints
- Restricts the value in the attribute of relation, specifies the Domain.
- Restrict the Data types of every attribute.
- E.g., We want to specify that the enrolment should happen for candidate birth year < 2002.
- Entity Constraints
- Every relation should have PK. PK != NULL.
- Referential Constraints
- Specified between two relations & helps maintain consistency among tuples of two relations.
- It requires that the value appearing in specified attributes of any tuple in referencing relation also appear in the specified attributes of at least one tuple in the referenced
relation.
- If FK in referencing table refers to PK of referenced table then every value of the FK in referencing table must be NULL or available in referenced table.
- FK must have the matching PK for its each value in the parent table or it must be NULL.
- Key Constraints: The six types of key constraints present in the Database management system are:-
- NOT NULL: This constraint will restrict the user from not having a NULL value. It ensures that every element in the database has a value.
- UNIQUE: It helps us to ensure that all the values consisting in a column are different from each other.
- DEFAULT: it is used to set the default value to the column. The default value is added to the columns if no value is specified for them.
- CHECK: It is one of the integrity constraints in DBMS. It keeps the check that integrity of data is maintained before and after the completion of the CRUD.
- PRIMARY KEY: This is an attribute or set of attributes that can uniquely identify each entity in the entity set. The primary key must contain unique as well as not null values.
- FOREIGN KEY: Whenever there is some relationship between two entities, there must be some common attribute between them. This common attribute must be the primary key of an entity set and will become the foreign key of another entity set. This key will prevent every action which can result in loss of connection between tables.
